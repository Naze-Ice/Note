[Scia Reto](https://sciareto.org) mind map   
> __version__=`1.1`,showJumps=`true`
---

# Distributed

## 理论&算法&协议

### 理论

#### CAP：C是一致性，A是可用性，P是分区容错性，P对于分布式系统是必须的，<br/>常见的CP架构ZooKeeper（Leader选举过程或半数以上节点不可用时服务不可用），<br/>AP架构Eureka（去中心化，只要有一个节点就能提供服务），Nacos两种都支持

#### BASE：CAP理论的补充，Basically Available（基本可用：允许损失响应时间和非核心功能的可用性）、<br/>Soft\-state（软状态：允许系统数据存在中间状态，不同节点的数据同步存在延时） 和 <br/>Eventually Consistent（最终一致性：读时修复、写时修复、异步修复）

### 算法&协议

#### Paxos算法

##### Basic Paxos 算法：多节点之间如何就某个值\(提案 Value\)达成共识

###### 提议者/协调者：负责接受客户端的请求并发起提案

###### 接受者/投票员：负责对提议者的提案进行投票

###### 学习者：过半接受者就某个提议达成了共识，则作出运算并将运算结果返回给客户端

##### Multi\-Paxos 思想：执行多个 Basic Paxos 实例，就一系列值达成共识

#### Raft算法（基于Paxos）

##### 节点类型

###### Leader：负责发起心跳，响应客户端，创建日志，同步日志

###### Candidate：Leader 选举过程中由 Follower 转化而来的临时角色，发起投票参与竞选

###### Follower：接受 Leader 的心跳和日志同步数据，投票给 Candidate

##### 任期

###### 将时间划分为任意长度的任期term

##### 日志

###### 由entry（\<term,index,cmd\>）构成的数组，Leader收到客户端请求后会创建entry，<br/>添加到日志末尾并向其他节点广播，要求其复制，如果过半节点成功响应则视为已提交

##### Leader选举

###### 通过心跳机制触发，Leader会周期性向所有Follower发送心跳，如Follower一个周期内没收到心跳，根据随机的选举超时时间后转换成Candidate并发起选举，<br/>发起选举时会带上最后一个entry，所有节点投票时会比对该entry，如果自己的更新（term更大、index更大）则拒绝投票，得票过半获胜

##### 时间与可用性

###### broadcastTime（向其他节点并发发送消息的平均响应时间） \<\< electionTimeout（选举超时时间） \<\< MTBF（单台机器的平均健康时间）

##### 动画演示
- LINK
<pre>http://thesecretlivesofdata.com/raft/</pre>

##### 应用

###### Nacos的高可用架构

###### Redis Sentinel高可用架构

#### Gossip协议（去中心化）

##### 消息传播方式

###### 反熵：消除不同节点中数据的差异，周期性的随机选择节点，互相交换所有数据来消除差异，包括推、拉、推拉三种方式<br/>，实际应用中一般会指定节点进行反熵形成闭环，可以在确定的时间范围内实现最终一致性

###### 谣言传播：一个节点接收新数据后会周期性的向其他节点发送新数据，<br/>直到所有节点都存储了该新数据，适合节点数量较多或节点动态变化的场景

##### 应用

###### Redis集群

###### Consul

## API网关

## 分布式ID

## 分布式锁

## 分布式事务

## 分布式配置中心

## ZooKeeper

## RPC
